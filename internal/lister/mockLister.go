// Code generated by MockGen. DO NOT EDIT.
// Source: ./lister.go
//
// Generated by this command:
//
//	mockgen -source=./lister.go -destination=mockLister.go -package=lister --typed
//

// Package lister is a generated GoMock package.
package lister

import (
	io "io"
	reflect "reflect"

	model "github.com/denizgursoy/gotouch/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockLister is a mock of Lister interface.
type MockLister struct {
	ctrl     *gomock.Controller
	recorder *MockListerMockRecorder
	isgomock struct{}
}

// MockListerMockRecorder is the mock recorder for MockLister.
type MockListerMockRecorder struct {
	mock *MockLister
}

// NewMockLister creates a new mock instance.
func NewMockLister(ctrl *gomock.Controller) *MockLister {
	mock := &MockLister{ctrl: ctrl}
	mock.recorder = &MockListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLister) EXPECT() *MockListerMockRecorder {
	return m.recorder
}

// GetProjectList mocks base method.
func (m *MockLister) GetProjectList(path *string) ([]*model.ProjectStructureData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectList", path)
	ret0, _ := ret[0].([]*model.ProjectStructureData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectList indicates an expected call of GetProjectList.
func (mr *MockListerMockRecorder) GetProjectList(path any) *MockListerGetProjectListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectList", reflect.TypeOf((*MockLister)(nil).GetProjectList), path)
	return &MockListerGetProjectListCall{Call: call}
}

// MockListerGetProjectListCall wrap *gomock.Call
type MockListerGetProjectListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListerGetProjectListCall) Return(arg0 []*model.ProjectStructureData, arg1 error) *MockListerGetProjectListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListerGetProjectListCall) Do(f func(*string) ([]*model.ProjectStructureData, error)) *MockListerGetProjectListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListerGetProjectListCall) DoAndReturn(f func(*string) ([]*model.ProjectStructureData, error)) *MockListerGetProjectListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadStrategy is a mock of ReadStrategy interface.
type MockReadStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockReadStrategyMockRecorder
	isgomock struct{}
}

// MockReadStrategyMockRecorder is the mock recorder for MockReadStrategy.
type MockReadStrategyMockRecorder struct {
	mock *MockReadStrategy
}

// NewMockReadStrategy creates a new mock instance.
func NewMockReadStrategy(ctrl *gomock.Controller) *MockReadStrategy {
	mock := &MockReadStrategy{ctrl: ctrl}
	mock.recorder = &MockReadStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadStrategy) EXPECT() *MockReadStrategyMockRecorder {
	return m.recorder
}

// ReadProjectStructures mocks base method.
func (m *MockReadStrategy) ReadProjectStructures() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProjectStructures")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProjectStructures indicates an expected call of ReadProjectStructures.
func (mr *MockReadStrategyMockRecorder) ReadProjectStructures() *MockReadStrategyReadProjectStructuresCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProjectStructures", reflect.TypeOf((*MockReadStrategy)(nil).ReadProjectStructures))
	return &MockReadStrategyReadProjectStructuresCall{Call: call}
}

// MockReadStrategyReadProjectStructuresCall wrap *gomock.Call
type MockReadStrategyReadProjectStructuresCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadStrategyReadProjectStructuresCall) Return(arg0 io.ReadCloser, arg1 error) *MockReadStrategyReadProjectStructuresCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadStrategyReadProjectStructuresCall) Do(f func() (io.ReadCloser, error)) *MockReadStrategyReadProjectStructuresCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadStrategyReadProjectStructuresCall) DoAndReturn(f func() (io.ReadCloser, error)) *MockReadStrategyReadProjectStructuresCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
