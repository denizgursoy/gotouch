// Code generated by MockGen. DO NOT EDIT.
// Source: ./operator.go
//
// Generated by this command:
//
//	mockgen -source=./operator.go -destination=mockoperator.go -package=operator
//

// Package operator is a generated GoMock package.
package operator

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
	isgomock struct{}
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// CompressDirectory mocks base method.
func (m *MockOperator) CompressDirectory(opts *CompressDirectoryOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompressDirectory", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompressDirectory indicates an expected call of CompressDirectory.
func (mr *MockOperatorMockRecorder) CompressDirectory(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressDirectory", reflect.TypeOf((*MockOperator)(nil).CompressDirectory), opts)
}

// CreateNewProject mocks base method.
func (m *MockOperator) CreateNewProject(opts *CreateNewProjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewProject", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewProject indicates an expected call of CreateNewProject.
func (mr *MockOperatorMockRecorder) CreateNewProject(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewProject", reflect.TypeOf((*MockOperator)(nil).CreateNewProject), opts)
}

// ValidateYaml mocks base method.
func (m *MockOperator) ValidateYaml(opts *ValidateYamlOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateYaml", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateYaml indicates an expected call of ValidateYaml.
func (mr *MockOperatorMockRecorder) ValidateYaml(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateYaml", reflect.TypeOf((*MockOperator)(nil).ValidateYaml), opts)
}
