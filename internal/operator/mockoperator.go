// Code generated by MockGen. DO NOT EDIT.
// Source: ./operator.go
//
// Generated by this command:
//
//	mockgen -source=./operator.go -destination=mockoperator.go -package=operator --typed
//

// Package operator is a generated GoMock package.
package operator

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
	isgomock struct{}
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// CompressDirectory mocks base method.
func (m *MockOperator) CompressDirectory(opts *CompressDirectoryOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompressDirectory", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompressDirectory indicates an expected call of CompressDirectory.
func (mr *MockOperatorMockRecorder) CompressDirectory(opts any) *MockOperatorCompressDirectoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressDirectory", reflect.TypeOf((*MockOperator)(nil).CompressDirectory), opts)
	return &MockOperatorCompressDirectoryCall{Call: call}
}

// MockOperatorCompressDirectoryCall wrap *gomock.Call
type MockOperatorCompressDirectoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperatorCompressDirectoryCall) Return(arg0 error) *MockOperatorCompressDirectoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperatorCompressDirectoryCall) Do(f func(*CompressDirectoryOptions) error) *MockOperatorCompressDirectoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperatorCompressDirectoryCall) DoAndReturn(f func(*CompressDirectoryOptions) error) *MockOperatorCompressDirectoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNewProject mocks base method.
func (m *MockOperator) CreateNewProject(ctx context.Context, opts *CreateNewProjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewProject", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewProject indicates an expected call of CreateNewProject.
func (mr *MockOperatorMockRecorder) CreateNewProject(ctx, opts any) *MockOperatorCreateNewProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewProject", reflect.TypeOf((*MockOperator)(nil).CreateNewProject), ctx, opts)
	return &MockOperatorCreateNewProjectCall{Call: call}
}

// MockOperatorCreateNewProjectCall wrap *gomock.Call
type MockOperatorCreateNewProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperatorCreateNewProjectCall) Return(arg0 error) *MockOperatorCreateNewProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperatorCreateNewProjectCall) Do(f func(context.Context, *CreateNewProjectOptions) error) *MockOperatorCreateNewProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperatorCreateNewProjectCall) DoAndReturn(f func(context.Context, *CreateNewProjectOptions) error) *MockOperatorCreateNewProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateYaml mocks base method.
func (m *MockOperator) ValidateYaml(opts *ValidateYamlOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateYaml", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateYaml indicates an expected call of ValidateYaml.
func (mr *MockOperatorMockRecorder) ValidateYaml(opts any) *MockOperatorValidateYamlCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateYaml", reflect.TypeOf((*MockOperator)(nil).ValidateYaml), opts)
	return &MockOperatorValidateYamlCall{Call: call}
}

// MockOperatorValidateYamlCall wrap *gomock.Call
type MockOperatorValidateYamlCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperatorValidateYamlCall) Return(arg0 error) *MockOperatorValidateYamlCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperatorValidateYamlCall) Do(f func(*ValidateYamlOptions) error) *MockOperatorValidateYamlCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperatorValidateYamlCall) DoAndReturn(f func(*ValidateYamlOptions) error) *MockOperatorValidateYamlCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
