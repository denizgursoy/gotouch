// Code generated by MockGen. DO NOT EDIT.
// Source: ./prompter.go
//
// Generated by this command:
//
//	mockgen -source=./prompter.go -destination=mockPrompter.go -package=prompter --typed
//

// Package prompter is a generated GoMock package.
package prompter

import (
	fmt "fmt"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
	isgomock struct{}
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// AskForMultilineString mocks base method.
func (m *MockPrompter) AskForMultilineString(direction, defaultValue, pattern string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForMultilineString", direction, defaultValue, pattern)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForMultilineString indicates an expected call of AskForMultilineString.
func (mr *MockPrompterMockRecorder) AskForMultilineString(direction, defaultValue, pattern any) *MockPrompterAskForMultilineStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForMultilineString", reflect.TypeOf((*MockPrompter)(nil).AskForMultilineString), direction, defaultValue, pattern)
	return &MockPrompterAskForMultilineStringCall{Call: call}
}

// MockPrompterAskForMultilineStringCall wrap *gomock.Call
type MockPrompterAskForMultilineStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPrompterAskForMultilineStringCall) Return(arg0 string, arg1 error) *MockPrompterAskForMultilineStringCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPrompterAskForMultilineStringCall) Do(f func(string, string, string) (string, error)) *MockPrompterAskForMultilineStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPrompterAskForMultilineStringCall) DoAndReturn(f func(string, string, string) (string, error)) *MockPrompterAskForMultilineStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AskForMultipleSelectionFromList mocks base method.
func (m *MockPrompter) AskForMultipleSelectionFromList(direction string, list []fmt.Stringer) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForMultipleSelectionFromList", direction, list)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForMultipleSelectionFromList indicates an expected call of AskForMultipleSelectionFromList.
func (mr *MockPrompterMockRecorder) AskForMultipleSelectionFromList(direction, list any) *MockPrompterAskForMultipleSelectionFromListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForMultipleSelectionFromList", reflect.TypeOf((*MockPrompter)(nil).AskForMultipleSelectionFromList), direction, list)
	return &MockPrompterAskForMultipleSelectionFromListCall{Call: call}
}

// MockPrompterAskForMultipleSelectionFromListCall wrap *gomock.Call
type MockPrompterAskForMultipleSelectionFromListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPrompterAskForMultipleSelectionFromListCall) Return(arg0 []any, arg1 error) *MockPrompterAskForMultipleSelectionFromListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPrompterAskForMultipleSelectionFromListCall) Do(f func(string, []fmt.Stringer) ([]any, error)) *MockPrompterAskForMultipleSelectionFromListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPrompterAskForMultipleSelectionFromListCall) DoAndReturn(f func(string, []fmt.Stringer) ([]any, error)) *MockPrompterAskForMultipleSelectionFromListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AskForSelectionFromList mocks base method.
func (m *MockPrompter) AskForSelectionFromList(direction string, list []fmt.Stringer) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForSelectionFromList", direction, list)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForSelectionFromList indicates an expected call of AskForSelectionFromList.
func (mr *MockPrompterMockRecorder) AskForSelectionFromList(direction, list any) *MockPrompterAskForSelectionFromListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForSelectionFromList", reflect.TypeOf((*MockPrompter)(nil).AskForSelectionFromList), direction, list)
	return &MockPrompterAskForSelectionFromListCall{Call: call}
}

// MockPrompterAskForSelectionFromListCall wrap *gomock.Call
type MockPrompterAskForSelectionFromListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPrompterAskForSelectionFromListCall) Return(arg0 any, arg1 error) *MockPrompterAskForSelectionFromListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPrompterAskForSelectionFromListCall) Do(f func(string, []fmt.Stringer) (any, error)) *MockPrompterAskForSelectionFromListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPrompterAskForSelectionFromListCall) DoAndReturn(f func(string, []fmt.Stringer) (any, error)) *MockPrompterAskForSelectionFromListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AskForString mocks base method.
func (m *MockPrompter) AskForString(direction string, validator Validator) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForString", direction, validator)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForString indicates an expected call of AskForString.
func (mr *MockPrompterMockRecorder) AskForString(direction, validator any) *MockPrompterAskForStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForString", reflect.TypeOf((*MockPrompter)(nil).AskForString), direction, validator)
	return &MockPrompterAskForStringCall{Call: call}
}

// MockPrompterAskForStringCall wrap *gomock.Call
type MockPrompterAskForStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPrompterAskForStringCall) Return(arg0 string, arg1 error) *MockPrompterAskForStringCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPrompterAskForStringCall) Do(f func(string, Validator) (string, error)) *MockPrompterAskForStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPrompterAskForStringCall) DoAndReturn(f func(string, Validator) (string, error)) *MockPrompterAskForStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AskForYesOrNo mocks base method.
func (m *MockPrompter) AskForYesOrNo(direction string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForYesOrNo", direction)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForYesOrNo indicates an expected call of AskForYesOrNo.
func (mr *MockPrompterMockRecorder) AskForYesOrNo(direction any) *MockPrompterAskForYesOrNoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForYesOrNo", reflect.TypeOf((*MockPrompter)(nil).AskForYesOrNo), direction)
	return &MockPrompterAskForYesOrNoCall{Call: call}
}

// MockPrompterAskForYesOrNoCall wrap *gomock.Call
type MockPrompterAskForYesOrNoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPrompterAskForYesOrNoCall) Return(arg0 bool, arg1 error) *MockPrompterAskForYesOrNoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPrompterAskForYesOrNoCall) Do(f func(string) (bool, error)) *MockPrompterAskForYesOrNoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPrompterAskForYesOrNoCall) DoAndReturn(f func(string) (bool, error)) *MockPrompterAskForYesOrNoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
