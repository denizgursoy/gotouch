// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloner.go
//
// Generated by this command:
//
//	mockgen -source=./cloner.go -destination=mockCloner.go -package=cloner
//

// Package cloner is a generated GoMock package.
package cloner

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCloner is a mock of Cloner interface.
type MockCloner struct {
	ctrl     *gomock.Controller
	recorder *MockClonerMockRecorder
	isgomock struct{}
}

// MockClonerMockRecorder is the mock recorder for MockCloner.
type MockClonerMockRecorder struct {
	mock *MockCloner
}

// NewMockCloner creates a new mock instance.
func NewMockCloner(ctrl *gomock.Controller) *MockCloner {
	mock := &MockCloner{ctrl: ctrl}
	mock.recorder = &MockClonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloner) EXPECT() *MockClonerMockRecorder {
	return m.recorder
}

// CloneFromUrl mocks base method.
func (m *MockCloner) CloneFromUrl(url, branchName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneFromUrl", url, branchName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneFromUrl indicates an expected call of CloneFromUrl.
func (mr *MockClonerMockRecorder) CloneFromUrl(url, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneFromUrl", reflect.TypeOf((*MockCloner)(nil).CloneFromUrl), url, branchName)
}
