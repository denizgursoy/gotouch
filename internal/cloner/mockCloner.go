// Code generated by MockGen. DO NOT EDIT.
// Source: cloner.go
//
// Generated by this command:
//
//	mockgen -source=cloner.go -destination=mockCloner.go -package=cloner --typed
//

// Package cloner is a generated GoMock package.
package cloner

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCloner is a mock of Cloner interface.
type MockCloner struct {
	ctrl     *gomock.Controller
	recorder *MockClonerMockRecorder
	isgomock struct{}
}

// MockClonerMockRecorder is the mock recorder for MockCloner.
type MockClonerMockRecorder struct {
	mock *MockCloner
}

// NewMockCloner creates a new mock instance.
func NewMockCloner(ctrl *gomock.Controller) *MockCloner {
	mock := &MockCloner{ctrl: ctrl}
	mock.recorder = &MockClonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloner) EXPECT() *MockClonerMockRecorder {
	return m.recorder
}

// CloneFromUrl mocks base method.
func (m *MockCloner) CloneFromUrl(ctx context.Context, url, branchName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneFromUrl", ctx, url, branchName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneFromUrl indicates an expected call of CloneFromUrl.
func (mr *MockClonerMockRecorder) CloneFromUrl(ctx, url, branchName any) *MockClonerCloneFromUrlCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneFromUrl", reflect.TypeOf((*MockCloner)(nil).CloneFromUrl), ctx, url, branchName)
	return &MockClonerCloneFromUrlCall{Call: call}
}

// MockClonerCloneFromUrlCall wrap *gomock.Call
type MockClonerCloneFromUrlCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClonerCloneFromUrlCall) Return(arg0 error) *MockClonerCloneFromUrlCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClonerCloneFromUrlCall) Do(f func(context.Context, string, string) error) *MockClonerCloneFromUrlCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClonerCloneFromUrlCall) DoAndReturn(f func(context.Context, string, string) error) *MockClonerCloneFromUrlCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
