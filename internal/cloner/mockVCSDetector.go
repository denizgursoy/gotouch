// Code generated by MockGen. DO NOT EDIT.
// Source: vcsDetector.go
//
// Generated by this command:
//
//	mockgen -source=vcsDetector.go -destination=mockVCSDetector.go -package=cloner --typed
//

// Package cloner is a generated GoMock package.
package cloner

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVCSDetector is a mock of VCSDetector interface.
type MockVCSDetector struct {
	ctrl     *gomock.Controller
	recorder *MockVCSDetectorMockRecorder
	isgomock struct{}
}

// MockVCSDetectorMockRecorder is the mock recorder for MockVCSDetector.
type MockVCSDetectorMockRecorder struct {
	mock *MockVCSDetector
}

// NewMockVCSDetector creates a new mock instance.
func NewMockVCSDetector(ctrl *gomock.Controller) *MockVCSDetector {
	mock := &MockVCSDetector{ctrl: ctrl}
	mock.recorder = &MockVCSDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSDetector) EXPECT() *MockVCSDetectorMockRecorder {
	return m.recorder
}

// DetectVCS mocks base method.
func (m *MockVCSDetector) DetectVCS(ctx context.Context, path string) (VCS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectVCS", ctx, path)
	ret0, _ := ret[0].(VCS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectVCS indicates an expected call of DetectVCS.
func (mr *MockVCSDetectorMockRecorder) DetectVCS(ctx, path any) *MockVCSDetectorDetectVCSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectVCS", reflect.TypeOf((*MockVCSDetector)(nil).DetectVCS), ctx, path)
	return &MockVCSDetectorDetectVCSCall{Call: call}
}

// MockVCSDetectorDetectVCSCall wrap *gomock.Call
type MockVCSDetectorDetectVCSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVCSDetectorDetectVCSCall) Return(arg0 VCS, arg1 error) *MockVCSDetectorDetectVCSCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVCSDetectorDetectVCSCall) Do(f func(context.Context, string) (VCS, error)) *MockVCSDetectorDetectVCSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVCSDetectorDetectVCSCall) DoAndReturn(f func(context.Context, string) (VCS, error)) *MockVCSDetectorDetectVCSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRequestExecutor is a mock of RequestExecutor interface.
type MockRequestExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockRequestExecutorMockRecorder
	isgomock struct{}
}

// MockRequestExecutorMockRecorder is the mock recorder for MockRequestExecutor.
type MockRequestExecutorMockRecorder struct {
	mock *MockRequestExecutor
}

// NewMockRequestExecutor creates a new mock instance.
func NewMockRequestExecutor(ctrl *gomock.Controller) *MockRequestExecutor {
	mock := &MockRequestExecutor{ctrl: ctrl}
	mock.recorder = &MockRequestExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestExecutor) EXPECT() *MockRequestExecutorMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRequestExecutor) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRequestExecutorMockRecorder) Do(req any) *MockRequestExecutorDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRequestExecutor)(nil).Do), req)
	return &MockRequestExecutorDoCall{Call: call}
}

// MockRequestExecutorDoCall wrap *gomock.Call
type MockRequestExecutorDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRequestExecutorDoCall) Return(arg0 *http.Response, arg1 error) *MockRequestExecutorDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRequestExecutorDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockRequestExecutorDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRequestExecutorDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockRequestExecutorDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
