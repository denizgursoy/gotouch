// Code generated by MockGen. DO NOT EDIT.
// Source: vcsDetector.go

// Package cloner is a generated GoMock package.
package cloner

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVCSDetector is a mock of VCSDetector interface.
type MockVCSDetector struct {
	ctrl     *gomock.Controller
	recorder *MockVCSDetectorMockRecorder
}

// MockVCSDetectorMockRecorder is the mock recorder for MockVCSDetector.
type MockVCSDetectorMockRecorder struct {
	mock *MockVCSDetector
}

// NewMockVCSDetector creates a new mock instance.
func NewMockVCSDetector(ctrl *gomock.Controller) *MockVCSDetector {
	mock := &MockVCSDetector{ctrl: ctrl}
	mock.recorder = &MockVCSDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSDetector) EXPECT() *MockVCSDetectorMockRecorder {
	return m.recorder
}

// DetectVCS mocks base method.
func (m *MockVCSDetector) DetectVCS(ctx context.Context, requester RequestExecutor, path string) (VCS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectVCS", ctx, requester, path)
	ret0, _ := ret[0].(VCS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectVCS indicates an expected call of DetectVCS.
func (mr *MockVCSDetectorMockRecorder) DetectVCS(ctx, requester, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectVCS", reflect.TypeOf((*MockVCSDetector)(nil).DetectVCS), ctx, requester, path)
}

// MockRequestExecutor is a mock of RequestExecutor interface.
type MockRequestExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockRequestExecutorMockRecorder
}

// MockRequestExecutorMockRecorder is the mock recorder for MockRequestExecutor.
type MockRequestExecutorMockRecorder struct {
	mock *MockRequestExecutor
}

// NewMockRequestExecutor creates a new mock instance.
func NewMockRequestExecutor(ctrl *gomock.Controller) *MockRequestExecutor {
	mock := &MockRequestExecutor{ctrl: ctrl}
	mock.recorder = &MockRequestExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestExecutor) EXPECT() *MockRequestExecutorMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRequestExecutor) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRequestExecutorMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRequestExecutor)(nil).Do), req)
}
