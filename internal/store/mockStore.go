// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go
//
// Generated by this command:
//
//	mockgen -source=./store.go -destination=mockStore.go -package=store --typed
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddCustomValues mocks base method.
func (m *MockStore) AddCustomValues(key map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCustomValues", key)
}

// AddCustomValues indicates an expected call of AddCustomValues.
func (mr *MockStoreMockRecorder) AddCustomValues(key any) *MockStoreAddCustomValuesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomValues", reflect.TypeOf((*MockStore)(nil).AddCustomValues), key)
	return &MockStoreAddCustomValuesCall{Call: call}
}

// MockStoreAddCustomValuesCall wrap *gomock.Call
type MockStoreAddCustomValuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreAddCustomValuesCall) Return() *MockStoreAddCustomValuesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreAddCustomValuesCall) Do(f func(map[string]any)) *MockStoreAddCustomValuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreAddCustomValuesCall) DoAndReturn(f func(map[string]any)) *MockStoreAddCustomValuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddDependency mocks base method.
func (m *MockStore) AddDependency(dependency any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", dependency)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockStoreMockRecorder) AddDependency(dependency any) *MockStoreAddDependencyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockStore)(nil).AddDependency), dependency)
	return &MockStoreAddDependencyCall{Call: call}
}

// MockStoreAddDependencyCall wrap *gomock.Call
type MockStoreAddDependencyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreAddDependencyCall) Return() *MockStoreAddDependencyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreAddDependencyCall) Do(f func(any)) *MockStoreAddDependencyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreAddDependencyCall) DoAndReturn(f func(any)) *MockStoreAddDependencyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddValues mocks base method.
func (m *MockStore) AddValues(key map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddValues", key)
}

// AddValues indicates an expected call of AddValues.
func (mr *MockStoreMockRecorder) AddValues(key any) *MockStoreAddValuesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValues", reflect.TypeOf((*MockStore)(nil).AddValues), key)
	return &MockStoreAddValuesCall{Call: call}
}

// MockStoreAddValuesCall wrap *gomock.Call
type MockStoreAddValuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreAddValuesCall) Return() *MockStoreAddValuesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreAddValuesCall) Do(f func(map[string]any)) *MockStoreAddValuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreAddValuesCall) DoAndReturn(f func(map[string]any)) *MockStoreAddValuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCustomValues mocks base method.
func (m *MockStore) GetCustomValues() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomValues")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetCustomValues indicates an expected call of GetCustomValues.
func (mr *MockStoreMockRecorder) GetCustomValues() *MockStoreGetCustomValuesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomValues", reflect.TypeOf((*MockStore)(nil).GetCustomValues))
	return &MockStoreGetCustomValuesCall{Call: call}
}

// MockStoreGetCustomValuesCall wrap *gomock.Call
type MockStoreGetCustomValuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetCustomValuesCall) Return(arg0 map[string]any) *MockStoreGetCustomValuesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetCustomValuesCall) Do(f func() map[string]any) *MockStoreGetCustomValuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetCustomValuesCall) DoAndReturn(f func() map[string]any) *MockStoreGetCustomValuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetValue mocks base method.
func (m *MockStore) GetValue(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockStoreMockRecorder) GetValue(key any) *MockStoreGetValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockStore)(nil).GetValue), key)
	return &MockStoreGetValueCall{Call: call}
}

// MockStoreGetValueCall wrap *gomock.Call
type MockStoreGetValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetValueCall) Return(arg0 string) *MockStoreGetValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetValueCall) Do(f func(string) string) *MockStoreGetValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetValueCall) DoAndReturn(f func(string) string) *MockStoreGetValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetValues mocks base method.
func (m *MockStore) GetValues() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValues")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetValues indicates an expected call of GetValues.
func (mr *MockStoreMockRecorder) GetValues() *MockStoreGetValuesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockStore)(nil).GetValues))
	return &MockStoreGetValuesCall{Call: call}
}

// MockStoreGetValuesCall wrap *gomock.Call
type MockStoreGetValuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetValuesCall) Return(arg0 map[string]any) *MockStoreGetValuesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetValuesCall) Do(f func() map[string]any) *MockStoreGetValuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetValuesCall) DoAndReturn(f func() map[string]any) *MockStoreGetValuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValue mocks base method.
func (m *MockStore) SetValue(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", key, value)
}

// SetValue indicates an expected call of SetValue.
func (mr *MockStoreMockRecorder) SetValue(key, value any) *MockStoreSetValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockStore)(nil).SetValue), key, value)
	return &MockStoreSetValueCall{Call: call}
}

// MockStoreSetValueCall wrap *gomock.Call
type MockStoreSetValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreSetValueCall) Return() *MockStoreSetValueCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreSetValueCall) Do(f func(string, string)) *MockStoreSetValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreSetValueCall) DoAndReturn(f func(string, string)) *MockStoreSetValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
