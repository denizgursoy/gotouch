// Code generated by MockGen. DO NOT EDIT.
// Source: ./runner.go
//
// Generated by this command:
//
//	mockgen -source=./runner.go -destination=mockCommandrunner.go -package=commandrunner --typed
//

// Package commandrunner is a generated GoMock package.
package commandrunner

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
	isgomock struct{}
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRunner) Run(data *CommandData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRunnerMockRecorder) Run(data any) *MockRunnerRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), data)
	return &MockRunnerRunCall{Call: call}
}

// MockRunnerRunCall wrap *gomock.Call
type MockRunnerRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRunnerRunCall) Return(arg0 error) *MockRunnerRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRunnerRunCall) Do(f func(*CommandData) error) *MockRunnerRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRunnerRunCall) DoAndReturn(f func(*CommandData) error) *MockRunnerRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
