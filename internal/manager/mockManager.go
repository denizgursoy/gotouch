// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go
//
// Generated by this command:
//
//	mockgen -source=./manager.go -destination=mockManager.go -package=manager --typed
//

// Package manager is a generated GoMock package.
package manager

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateDirectoryIfNotExist mocks base method.
func (m *MockManager) CreateDirectoryIfNotExist(directoryName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryIfNotExist", directoryName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDirectoryIfNotExist indicates an expected call of CreateDirectoryIfNotExist.
func (mr *MockManagerMockRecorder) CreateDirectoryIfNotExist(directoryName any) *MockManagerCreateDirectoryIfNotExistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryIfNotExist", reflect.TypeOf((*MockManager)(nil).CreateDirectoryIfNotExist), directoryName)
	return &MockManagerCreateDirectoryIfNotExistCall{Call: call}
}

// MockManagerCreateDirectoryIfNotExistCall wrap *gomock.Call
type MockManagerCreateDirectoryIfNotExistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerCreateDirectoryIfNotExistCall) Return(arg0 error) *MockManagerCreateDirectoryIfNotExistCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerCreateDirectoryIfNotExistCall) Do(f func(string) error) *MockManagerCreateDirectoryIfNotExistCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerCreateDirectoryIfNotExistCall) DoAndReturn(f func(string) error) *MockManagerCreateDirectoryIfNotExistCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateFile mocks base method.
func (m *MockManager) CreateFile(reader io.ReadCloser, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", reader, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockManagerMockRecorder) CreateFile(reader, path any) *MockManagerCreateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockManager)(nil).CreateFile), reader, path)
	return &MockManagerCreateFileCall{Call: call}
}

// MockManagerCreateFileCall wrap *gomock.Call
type MockManagerCreateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerCreateFileCall) Return(arg0 error) *MockManagerCreateFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerCreateFileCall) Do(f func(io.ReadCloser, string) error) *MockManagerCreateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerCreateFileCall) DoAndReturn(f func(io.ReadCloser, string) error) *MockManagerCreateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetExtractLocation mocks base method.
func (m *MockManager) GetExtractLocation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtractLocation")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExtractLocation indicates an expected call of GetExtractLocation.
func (mr *MockManagerMockRecorder) GetExtractLocation() *MockManagerGetExtractLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtractLocation", reflect.TypeOf((*MockManager)(nil).GetExtractLocation))
	return &MockManagerGetExtractLocationCall{Call: call}
}

// MockManagerGetExtractLocationCall wrap *gomock.Call
type MockManagerGetExtractLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerGetExtractLocationCall) Return(arg0 string) *MockManagerGetExtractLocationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerGetExtractLocationCall) Do(f func() string) *MockManagerGetExtractLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerGetExtractLocationCall) DoAndReturn(f func() string) *MockManagerGetExtractLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
