// Code generated by MockGen. DO NOT EDIT.
// Source: ./config.go
//
// Generated by this command:
//
//	mockgen -source=./config.go -destination=mockConfig.go -package=config --typed
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigManager is a mock of ConfigManager interface.
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
	isgomock struct{}
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager.
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance.
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// GetDefaultPath mocks base method.
func (m *MockConfigManager) GetDefaultPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultPath indicates an expected call of GetDefaultPath.
func (mr *MockConfigManagerMockRecorder) GetDefaultPath() *MockConfigManagerGetDefaultPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPath", reflect.TypeOf((*MockConfigManager)(nil).GetDefaultPath))
	return &MockConfigManagerGetDefaultPathCall{Call: call}
}

// MockConfigManagerGetDefaultPathCall wrap *gomock.Call
type MockConfigManagerGetDefaultPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigManagerGetDefaultPathCall) Return(arg0 string, arg1 error) *MockConfigManagerGetDefaultPathCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigManagerGetDefaultPathCall) Do(f func() (string, error)) *MockConfigManagerGetDefaultPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigManagerGetDefaultPathCall) DoAndReturn(f func() (string, error)) *MockConfigManagerGetDefaultPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValueOf mocks base method.
func (m *MockConfigManager) SetValueOf(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValueOf", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValueOf indicates an expected call of SetValueOf.
func (mr *MockConfigManagerMockRecorder) SetValueOf(key, value any) *MockConfigManagerSetValueOfCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValueOf", reflect.TypeOf((*MockConfigManager)(nil).SetValueOf), key, value)
	return &MockConfigManagerSetValueOfCall{Call: call}
}

// MockConfigManagerSetValueOfCall wrap *gomock.Call
type MockConfigManagerSetValueOfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigManagerSetValueOfCall) Return(arg0 error) *MockConfigManagerSetValueOfCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigManagerSetValueOfCall) Do(f func(string, string) error) *MockConfigManagerSetValueOfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigManagerSetValueOfCall) DoAndReturn(f func(string, string) error) *MockConfigManagerSetValueOfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnsetValuesOf mocks base method.
func (m *MockConfigManager) UnsetValuesOf(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetValuesOf", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetValuesOf indicates an expected call of UnsetValuesOf.
func (mr *MockConfigManagerMockRecorder) UnsetValuesOf(key any) *MockConfigManagerUnsetValuesOfCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetValuesOf", reflect.TypeOf((*MockConfigManager)(nil).UnsetValuesOf), key)
	return &MockConfigManagerUnsetValuesOfCall{Call: call}
}

// MockConfigManagerUnsetValuesOfCall wrap *gomock.Call
type MockConfigManagerUnsetValuesOfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigManagerUnsetValuesOfCall) Return(arg0 error) *MockConfigManagerUnsetValuesOfCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigManagerUnsetValuesOfCall) Do(f func(string) error) *MockConfigManagerUnsetValuesOfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigManagerUnsetValuesOfCall) DoAndReturn(f func(string) error) *MockConfigManagerUnsetValuesOfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
